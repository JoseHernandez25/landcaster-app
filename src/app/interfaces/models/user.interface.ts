// Generated by https://quicktype.io

export interface User {
    id:                   string;
    profilePhoto:         string;
    userName:             string;
    normalizedUserName:   string;
    email:                string;
    normalizedEmail:      string;
    emailConfirmed:       boolean;
    passwordHash:         string;
    securityStamp:        string;
    concurrencyStamp:     TartuGecko;
    phoneNumber:          string;
    phoneNumberConfirmed: boolean;
    twoFactorEnabled:     boolean;
    lockoutEnd:           string;
    lockoutEnabled:       boolean;
    accessFailedCount:    number;
    employee:             Employee;
    role:                 Role;
    distributor:          Distributor;
    permissions:          Permission[];
    createdAt:            string;
    updatedAt:            string;
    deletedAt:            string;
    roleId:               string;
}

export enum TartuGecko {
    String = "string",
}

export interface Distributor {
    id:        number;
    userId:    TartuGecko;
    name:      TartuGecko;
    telephone: TartuGecko;
    email:     TartuGecko;
    rfc:       TartuGecko;
    user:      TartuGecko;
    stores:    Store[];
    address:   TartuGecko;
    createdAt: string;
    updatedAt: string;
    deletedAt: string;
}

export interface Store {
    id:          number;
    code:        TartuGecko;
    name:        TartuGecko;
    address:     TartuGecko;
    telephone:   TartuGecko;
    userId:      TartuGecko;
    ubication:   Ubication;
    createdAt:   string;
    updateAt:    string;
    deletedAt:   string;
    user:        TartuGecko;
    distributor: TartuGecko;
    employees:   TartuGecko[];
    clientes:    Cliente[];
}

export interface Cliente {
    id:           number;
    name:         TartuGecko;
    prefix:       TartuGecko;
    birthDate:    string;
    telephone:    TartuGecko;
    email:        TartuGecko;
    customerType: number;
    frequency:    number;
    address:      TartuGecko;
    rfc:          TartuGecko;
    storeId:      number;
    store:        TartuGecko;
    createdAt:    string;
    updatedAt:    string;
    deletedAt:    string;
}

export interface Ubication {
    factory:            BoundaryFactory;
    userData:           TartuGecko;
    srid:               number;
    precisionModel:     PrecisionModel;
    numGeometries:      number;
    isSimple:           boolean;
    isValid:            boolean;
    area:               number;
    length:             number;
    centroid:           TartuGecko;
    interiorPoint:      TartuGecko;
    pointOnSurface:     TartuGecko;
    envelope:           Boundary;
    envelopeInternal:   EnvelopeInternal;
    isRectangle:        boolean;
    coordinateSequence: CoordinateSequence;
    coordinates:        Coordinate[];
    numPoints:          number;
    isEmpty:            boolean;
    dimension:          number;
    boundaryDimension:  number;
    x:                  number;
    y:                  number;
    coordinate:         Coordinate;
    geometryType:       TartuGecko;
    ogcGeometryType:    number;
    boundary:           Boundary;
    z:                  number;
    m:                  number;
}

export interface Boundary {
    factory:           BoundaryFactory;
    userData:          TartuGecko;
    srid:              number;
    geometryType:      TartuGecko;
    ogcGeometryType:   number;
    precisionModel:    PrecisionModel;
    coordinate:        Coordinate;
    coordinates:       Coordinate[];
    numPoints:         number;
    numGeometries:     number;
    isSimple:          boolean;
    isValid:           boolean;
    isEmpty:           boolean;
    area:              number;
    length:            number;
    centroid:          TartuGecko;
    interiorPoint:     TartuGecko;
    pointOnSurface:    TartuGecko;
    dimension:         number;
    boundary:          TartuGecko;
    boundaryDimension: number;
    envelope:          TartuGecko;
    envelopeInternal:  EnvelopeInternal;
    isRectangle:       boolean;
}

export interface Coordinate {
    x:               number;
    y:               number;
    z:               number;
    m:               number;
    coordinateValue: TartuGecko;
    isValid:         boolean;
}

export interface EnvelopeInternal {
    isNull:    boolean;
    width:     number;
    height:    number;
    diameter:  number;
    minX:      number;
    maxX:      number;
    minY:      number;
    maxY:      number;
    area:      number;
    minExtent: number;
    maxExtent: number;
    centre:    Coordinate;
}

export interface BoundaryFactory {
    precisionModel:            PrecisionModel;
    coordinateSequenceFactory: CoordinateSequenceFactory;
    srid:                      number;
    geometryServices:          GeometryServices;
}

export interface CoordinateSequenceFactory {
    ordinates: number;
}

export interface GeometryServices {
    geometryOverlay:                  CoordinateEqualityComparer;
    coordinateEqualityComparer:       CoordinateEqualityComparer;
    defaultSRID:                      number;
    defaultCoordinateSequenceFactory: CoordinateSequenceFactory;
    defaultPrecisionModel:            PrecisionModel;
}

export interface CoordinateEqualityComparer {
}

export interface PrecisionModel {
    isFloating:               boolean;
    maximumSignificantDigits: number;
    scale:                    number;
    gridSize:                 number;
    precisionModelType:       number;
}

export interface CoordinateSequence {
    dimension:      number;
    measures:       number;
    spatial:        number;
    ordinates:      number;
    hasZ:           boolean;
    hasM:           boolean;
    zOrdinateIndex: number;
    mOrdinateIndex: number;
    first:          Coordinate;
    last:           Coordinate;
    count:          number;
}

export interface Employee {
    id:              number;
    code:            number;
    name:            TartuGecko;
    userId:          TartuGecko;
    storeId:         number;
    factoryId:       number;
    birthDate:       string;
    telephone:       TartuGecko;
    email:           TartuGecko;
    status:          number;
    address:         TartuGecko;
    curp:            TartuGecko;
    nss:             TartuGecko;
    profilePhotoUrl: TartuGecko;
    rfc:             TartuGecko;
    store:           Store;
    factory:         EmployeeFactory;
    user:            TartuGecko;
    events:          Event[];
    createdAt:       string;
    updatedAt:       string;
    deletedAt:       string;
}

export interface Event {
    id:          number;
    description: TartuGecko;
    type:        number;
    createdAt:   string;
    updateAt:    string;
    deletedAt:   string;
    employeeId:  number;
    employee:    TartuGecko;
}

export interface EmployeeFactory {
    id:        number;
    code:      TartuGecko;
    name:      TartuGecko;
    createdAt: string;
    updateAt:  string;
    deletedAt: string;
    cityId:    number;
    city:      City;
    suppliers: Supplier[];
    employees: TartuGecko[];
}

export interface City {
    id:           number;
    name:         TartuGecko;
    abbreviation: TartuGecko;
    createdAt:    string;
    updatedAt:    string;
    deletedAt:    string;
    stateId:      number;
    state:        State;
    factories:    TartuGecko[];
}

export interface State {
    id:           number;
    name:         TartuGecko;
    abbreviation: TartuGecko;
    createdAt:    string;
    updateAt:     string;
    deletedAt:    string;
    countryId:    number;
    country:      Country;
    cities:       TartuGecko[];
}

export interface Country {
    id:           number;
    name:         TartuGecko;
    abbreviation: TartuGecko;
    createdAt:    string;
    updateAt:     string;
    deletedAt:    string;
    states:       TartuGecko[];
}

export interface Supplier {
    id:             number;
    name:           TartuGecko;
    code:           TartuGecko;
    credit:         number;
    website:        TartuGecko;
    representative: TartuGecko;
    observations:   TartuGecko;
    account:        TartuGecko;
    creditor:       number;
    telephone:      TartuGecko;
    email:          TartuGecko;
    address:        TartuGecko;
    rfc:            TartuGecko;
    createdAt:      string;
    updateAt:       string;
    deletedAt:      string;
    factories:      TartuGecko[];
    couriers:       Courier[];
    discounts:      Discount[];
}

export interface Courier {
    id:        number;
    name:      TartuGecko;
    createdAt: string;
    updateAt:  string;
    deletedAt: string;
    suppliers: TartuGecko[];
}

export interface Discount {
    id:         number;
    name:       TartuGecko;
    value:      TartuGecko;
    createdAt:  string;
    updateAt:   string;
    deletedAt:  string;
    supplierId: number;
    supplier:   TartuGecko;
}

export interface Permission {
    id:          number;
    name:        TartuGecko;
    alias:       TartuGecko;
    description: TartuGecko;
    roles:       TartuGecko[];
    users:       TartuGecko[];
    createdAt:   string;
    updatedAt:   string;
    deletedAt:   string;
}

export interface Role {
    id:               TartuGecko;
    name:             string;
    normalizedName:   string;
    concurrencyStamp: TartuGecko;
    description:      TartuGecko;
    users:            TartuGecko[];
    permissions:      Permission[];
    createdAt:        string;
    updatedAt:        string;
    deletedAt:        string;
}
